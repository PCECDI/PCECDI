# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Qt Integration Tests (ubuntu-latest gcc)
on: push
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - id: Qt
        uses: jurplel/install-qt-action@v3
      - uses: actions/checkout@v3
      - id: install_conan
        uses: turtlebrowser/get-conan@main
        with:
          version: 1.59.0
      - id: patch_conan
        run: conan profile new default --detect && conan profile update settings.compiler.libcxx=libstdc++11 default
      - id: run_conan
        run: cd ${GITHUB_WORKSPACE}/test && conan install --generator cmake_find_package --install-folder ../build_test/conan-dependencies .
      - id: cmake
        run: cd ${GITHUB_WORKSPACE}/test && cmake -DCMAKE_BUILD_TYPE=Debug -DTEST_QT=ON -B../build_test -S.
      - id: make
        run: cd ${GITHUB_WORKSPACE}/build_test && make
      - id: run
        run: cd ${GITHUB_WORKSPACE}/build_test && ./ForscapeTests -platform offscreen
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

